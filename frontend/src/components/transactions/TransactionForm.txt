// =============================================================================
// CO404 FRONTEND - TRANSACTION FORM COMPONENT
// =============================================================================

import React, { useState } from 'react';
import { TransactionForm as TransactionFormType, BusinessData, User } from '../../types';

interface TransactionFormProps {
  onAddTransaction: (transaction: TransactionFormType) => Promise<void>;
  businessData: BusinessData;
  user: User;
  activeShift: any;
}

export const TransactionForm: React.FC<TransactionFormProps> = ({
  onAddTransaction,
  businessData,
  user,
  activeShift
}) => {
  const [form, setForm] = useState<TransactionFormType>({
    description: '',
    amount: '',
    type: 'expense',
    location: user.location === 'all' ? 'Oaxaca City' : user.location,
    category: businessData.expenseCategories[0] || '',
    paymentMethod: businessData.paymentMethods[0] || ''
  });

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (form.description && form.amount && form.category && form.paymentMethod) {
      try {
        await onAddTransaction(form);
        setForm(prev => ({ 
          ...prev, 
          description: '', 
          amount: ''
        }));
      } catch (error) {
        console.error('Error adding transaction:', error);
      }
    }
  };

  const handleTypeChange = (type: 'income' | 'expense') => {
    const categories = type === 'income' 
      ? businessData.incomeCategories 
      : businessData.expenseCategories;
    
    setForm(prev => ({ 
      ...prev, 
      type, 
      category: categories[0] || '' 
    }));
  };

  const getAvailableCategories = () => {
    return form.type === 'income' 
      ? businessData.incomeCategories 
      : businessData.expenseCategories;
  };

  return (
    <div className="add-transaction">
      <h3>üí∞ Add New Transaction {activeShift ? '(Linked to Active Shift)' : ''}</h3>
      
      {!activeShift && (
        <div style={{
          background: '#FFF3CD',
          color: '#856404',
          padding: '1rem',
          borderRadius: '8px',
          marginBottom: '1rem',
          border: '1px solid #FFEAA7'
        }}>
          ‚ö†Ô∏è No active shift - transactions won't be linked to a shift
        </div>
      )}
      
      <form onSubmit={handleSubmit} className="enhanced-form">
        <div className="form-row">
          <input
            type="text"
            placeholder="Description"
            value={form.description}
            onChange={(e) => setForm(prev => ({ ...prev, description: e.target.value }))}
            required
          />
          <input
            type="number"
            step="0.01"
            placeholder="Amount"
            value={form.amount}
            onChange={(e) => setForm(prev => ({ ...prev, amount: e.target.value }))}
            required
          />
        </div>
        
        <div className="form-row">
          <select
            value={form.type}
            onChange={(e) => handleTypeChange(e.target.value as 'income' | 'expense')}
            required
          >
            <option value="expense">üí∏ Expense</option>
            <option value="income">üí∞ Income</option>
          </select>
          
          <select
            value={form.category}
            onChange={(e) => setForm(prev => ({ ...prev, category: e.target.value }))}
            required
          >
            <option value="">Select Category</option>
            {getAvailableCategories().map(category => (
              <option key={category} value={category}>{category}</option>
            ))}
          </select>
        </div>
        
        <div className="form-row">
          <select
            value={form.paymentMethod}
            onChange={(e) => setForm(prev => ({ ...prev, paymentMethod: e.target.value }))}
            required
          >
            <option value="">Payment Method</option>
            {businessData.paymentMethods.map(method => (
              <option key={method} value={method}>{method}</option>
            ))}
          </select>
          
          {user.role === 'admin' && (
            <select
              value={form.location}
              onChange={(e) => setForm(prev => ({ ...prev, location: e.target.value }))}
              required
            >
              <option value="Oaxaca City">Oaxaca City</option>
              <option value="San Crist√≥bal">San Crist√≥bal</option>
              <option value="Medell√≠n">Medell√≠n</option>
            </select>
          )}
        </div>
        
        <button type="submit" className="submit-btn">‚ú® Add Transaction</button>
      </form>
    </div>
  );
};