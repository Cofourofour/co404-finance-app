// =============================================================================
// CO404 FRONTEND - DASHBOARD PAGE
// =============================================================================

import React, { useState, useEffect } from 'react';
import { User, BusinessData } from '../types';
import { useTransactions, useShift } from '../hooks';
import { TransactionCard, TransactionForm } from '../components';
import { apiService } from '../services/api';

interface DashboardProps {
  user: User;
  onLogout: () => void;
}

export const Dashboard: React.FC<DashboardProps> = ({ user, onLogout }) => {
  const [selectedLocation, setSelectedLocation] = useState('all');
  const [businessData, setBusinessData] = useState<BusinessData>({
    expenseCategories: [],
    incomeCategories: [],
    paymentMethods: [],
    locations: [],
    currencies: {}
  });

  const { transactions, addTransaction, loading: transactionsLoading } = useTransactions(
    user.role === 'admin' ? selectedLocation : undefined
  );
  
  const { activeShift, startShift, endShift, loading: shiftLoading } = useShift();

  // Fetch business data on mount
  useEffect(() => {
    const fetchBusinessData = async () => {
      try {
        const data = await apiService.getBusinessData();
        setBusinessData(data);
      } catch (error) {
        console.error('Error fetching business data:', error);
      }
    };
    fetchBusinessData();
  }, []);

  // Calculate totals
  const totalIncome = selectedLocation === 'all' 
    ? transactions.filter(t => t.amount > 0).reduce((sum, t) => sum + t.amountUSD, 0)
    : transactions.filter(t => t.amount > 0).reduce((sum, t) => sum + t.amount, 0);
    
  const totalExpenses = selectedLocation === 'all'
    ? Math.abs(transactions.filter(t => t.amount < 0).reduce((sum, t) => sum + t.amountUSD, 0))
    : Math.abs(transactions.filter(t => t.amount < 0).reduce((sum, t) => sum + t.amount, 0));
    
  const totalBalance = totalIncome - totalExpenses;

  // Get currency symbol
  const getCurrencySymbol = (): string => {
    if (user.role === 'admin') {
      if (selectedLocation === 'all') {
        return '$USD';
      } else {
        const locationCurrency: Record<string, string> = {
          'San Cristóbal': '$MXN',
          'Oaxaca City': '$MXN', 
          'Medellín': '$COP'
        };
        return locationCurrency[selectedLocation] || '$';
      }
    }
    
    const userLocationCurrency: Record<string, string> = {
      'San Cristóbal': '$MXN',
      'Oaxaca City': '$MXN', 
      'Medellín': '$COP'
    };
    return userLocationCurrency[user.location] || '$MXN';
  };

  return (
    <div className="App">
      <header className="App-header">
        <div className="header-top">
          <h1>Co404 Finance Dashboard</h1>
          <div className="user-info">
            <span>Welcome, {user.name}!</span>
            <span className="role-badge">{user.role}</span>
            <span className="location-badge">{user.location}</span>
            <button onClick={onLogout} className="logout-btn">Logout</button>
          </div>
        </div>

        {/* Location Filter Buttons - Admin Only */}
        {user.role === 'admin' && (
          <div className="location-filters">
            <h3>View Location:</h3>
            <div className="filter-buttons">
              <button 
                className={selectedLocation === 'all' ? 'active' : ''}
                onClick={() => setSelectedLocation('all')}
              >
                All Locations (USD)
              </button>
              <button 
                className={selectedLocation === 'San Cristóbal' ? 'active' : ''}
                onClick={() => setSelectedLocation('San Cristóbal')}
              >
                San Cristóbal (MXN)
              </button>
              <button 
                className={selectedLocation === 'Oaxaca City' ? 'active' : ''}
                onClick={() => setSelectedLocation('Oaxaca City')}
              >
                Oaxaca City (MXN)
              </button>
              <button 
                className={selectedLocation === 'Medellín' ? 'active' : ''}
                onClick={() => setSelectedLocation('Medellín')}
              >
                Medellín (COP)
              </button>
            </div>
          </div>
        )}

        {/* Stats Overview */}
        <div className="stats-grid">
          <div className="stat-card">
            <div className="stat-value income">{getCurrencySymbol()}{totalIncome.toLocaleString()}</div>
            <div>Total Income</div>
          </div>
          <div className="stat-card">
            <div className="stat-value expense">{getCurrencySymbol()}{totalExpenses.toLocaleString()}</div>
            <div>Total Expenses</div>
          </div>
          <div className="stat-card">
            <div className="stat-value balance">{getCurrencySymbol()}{totalBalance.toLocaleString()}</div>
            <div>Net Balance</div>
          </div>
          <div className="stat-card">
            <div className="stat-value">{transactions.length}</div>
            <div>Total Transactions</div>
          </div>
        </div>

        {/* Transaction Form */}
        <TransactionForm
          onAddTransaction={addTransaction}
          businessData={businessData}
          user={user}
          activeShift={activeShift}
        />

        {/* Recent Transactions */}
        <div className="transactions">
          <h3>📊 Recent Transactions{selectedLocation !== 'all' ? ` - ${selectedLocation}` : ''} ({transactions.length})</h3>
          {transactionsLoading ? (
            <div style={{textAlign: 'center', padding: '2rem', color: '#666'}}>
              Loading transactions...
            </div>
          ) : transactions.length === 0 ? (
            <div style={{textAlign: 'center', padding: '2rem', color: '#666'}}>
              No transactions found. Add your first transaction above!
            </div>
          ) : (
            transactions.slice(0, 20).map(transaction => (
              <TransactionCard
                key={transaction.id}
                transaction={transaction}
                selectedLocation={selectedLocation}
              />
            ))
          )}
        </div>
      </header>
    </div>
  );
};